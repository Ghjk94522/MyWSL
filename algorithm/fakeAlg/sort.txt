def select_sort(A[1..n]):
    for i := n downto 2 do:
        index_of_max := select_sort(A[1..i]);
        swap(A[index_of_max], A[i]);

def insertion_sort(A[1..n]):
    for j := 2 to n do:
        temp := A[j];
        i := j - 1;
        while i > 0 and A[i] > temp do:
            A[i+1] := A[i];
            i := i - 1;
        A[i+1] := temp;

def bubble_sort(A[1..n]):
    for i := n downto 2  do:
        for j := 1 to i-1 do:
            if A[j] > A[j+1] then:
                swap(A[j], A[j+1]);

def partition(A, p, r):
    pivot := A[r];
    i := p-1;
    for j := p to r-1 do:
        if A[j] < pivot then:
            i := i+1;
            swap(A[i], A[j]);
    swap(A[i+1], A[r]);
    return i+1;

def quick_sort(A, p, r):
    if p < r then:
        q := partition(A, p, r);
        quick_sort(A, p, q-1);
        quick_sort(A, q+1, r);

def merge(A, p, q, r):
    n_1 := q-p+1;
    n_2 := r-q;
    Let L[1..(n_1 + 1)] and R[1..(n_2 + 1)] be new arrays;
    for i := 1 to n_1 do:
        L[i] := A[p+i-1];
    for j := 1 to n_2 do:
        R[j] := A[q+j];
    L[n_1+1] := +∞
    R[n_2+1] := +∞
    i := 1; j := 1;
    for k := p to r do:
        if L[i] < R[j] then:
            A[k] := L[i];
            i := i + 1;
        else:
            A[k] := R[j];
            j := j + 1;

def merge_sort(A, p, r):
    if p < r then:
        q := (p+r) / 2;
        merge_sort(A, p, q);
        merge_sort(A, q+1, r);
        merge(A, p, q, r);

